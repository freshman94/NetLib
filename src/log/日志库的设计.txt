日志库的设计仿照了muduo日志库的设计，但更为简单些

与日志库相关的类有：FileUtil、LogFile、LogStrem、Logger、AsyncLogging

FileUtil类：最底层的文件类，封装了日志文件的打开，析构时关闭文件。其中调用了无锁的文件IO，append日志到文件缓冲区中。

LogFile类：进一步封装FileUtil，并提供了日志文件滚动（rolling）的功能。若日志文件的大小超过了roll_size，就会滚动文件。文件名的格式为：
		logfile.20120603-144022.log。同时，每隔3秒或append了1024次日志到文件缓冲区中，就flush一次，将缓冲空间中的日志写入文件中。
		
LogStream类： 格式化输出，重载了<<运算符，其中包含的小块缓冲区是为了将多个<<的结果连起来。

Logger类：用户接口。定义了6种日志级别，默认级别是INFO，调整日志的输出级别不需要重新编译，也不需要重启进程，只需要调用
		Logger::setLogLevel()就能即时生效。其中内含了LogStrem对象，一条日志占一行，并会被标上起始和结束信息。默认将日志信息输出至stdout
		
AsyncLogging类：核心类，实现了异步日志的功能。启动了一个日志线程（后端），负责收集日志消息，并写入日志文件中，其它的业务线程只管往这个
		日志线程发送日志消息（前端）。其中应用了双缓冲的技术，实际中则使用了4个以上的缓冲区，这样可以进一步减少日志前端的等待。当前端的
		日志缓冲区已满或者超过了一定的时间（3秒）时，前端就会通知后端的日志线程将缓冲区的数据写入日志文件中。